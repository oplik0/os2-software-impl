name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, nightly]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
    - name: Add components
      run: |
        rustup component add rustfmt
        rustup component add clippy
    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run unit tests
      run: cargo test --lib

    - name: Run integration tests
      run: cargo test --test integration_tests

    - name: Run all tests with output
      run: cargo test -- --nocapture

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-bench-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-bench-

    - name: Install criterion dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gnuplot

    - name: Run crypto benchmarks
      run: cargo bench --bench crypto_benchmarks -- --output-format html

    - name: Run OS2 workflow benchmarks  
      run: cargo bench --bench os2_benchmarks -- --output-format html

    - name: Create benchmark results directory
      run: mkdir -p benchmark-results

    - name: Copy benchmark reports
      run: |
        cp -r target/criterion/* benchmark-results/ || true
        find benchmark-results -name "*.html" -type f > benchmark-results/report-list.txt || true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ github.sha }}
        path: benchmark-results/
        retention-days: 30

    - name: Generate benchmark summary
      run: |
        echo "## Benchmark Results" > benchmark-summary.md
        echo "" >> benchmark-summary.md
        echo "Benchmark completed successfully for commit ${{ github.sha }}" >> benchmark-summary.md
        echo "" >> benchmark-summary.md
        echo "### Available Reports:" >> benchmark-summary.md
        if [ -f benchmark-results/report-list.txt ]; then
          while read -r report; do
            echo "- $(basename "$report" .html)" >> benchmark-summary.md
          done < benchmark-results/report-list.txt
        fi
        echo "" >> benchmark-summary.md
        echo "Download the 'benchmark-results' artifact to view detailed HTML reports." >> benchmark-summary.md

    - name: Comment benchmark results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('benchmark-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    needs: [test, benchmark]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Build release
      run: cargo build --release

    - name: Upload release binary
      uses: actions/upload-artifact@v4
      with:
        name: os2-software-impl-release-${{ github.sha }}
        path: target/release/
        retention-days: 90
